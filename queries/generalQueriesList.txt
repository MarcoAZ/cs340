-- list of queries

DROP TABLE IF EXISTS itemInstance;
DROP TABLE IF EXISTS pCharSkill;
DROP TABLE IF EXISTS playerCharacter;
DROP TABLE IF EXISTS itemClass;
DROP TABLE IF EXISTS characterClass;
DROP TABLE IF EXISTS player;
DROP TABLE IF EXISTS skill;

-- create tables

CREATE TABLE `itemClass` (
	`id` int NOT NULL AUTO_INCREMENT,
	`itemName` varchar(255) NOT NULL,
	PRIMARY KEY (`id`),
	UNIQUE KEY (`itemName`)
) ENGINE=InnoDB;

CREATE TABLE `characterClass` (
	`id` int NOT NULL AUTO_INCREMENT,
	`className` varchar(255) NOT NULL,
	`startLevel` tinyint UNSIGNED DEFAULT 1,
	`startHealth` smallint UNSIGNED DEFAULT 100,
	`startStrength` smallint UNSIGNED NOT NULL,
	PRIMARY KEY (`id`),
	UNIQUE KEY (`className`)
) ENGINE=InnoDB;

CREATE TABLE `player` (
	`id` int NOT NULL AUTO_INCREMENT,
	`userName` varChar(255) NOT NULL,
	`email` varChar(255),
	PRIMARY KEY (`id`),
	UNIQUE KEY (`userName`),
	UNIQUE KEY (`email`)
) ENGINE=InnoDB;

CREATE TABLE `skill` (
	`id` int NOT NULL AUTO_INCREMENT,
	`skillName` varchar(255) NOT NULL,
	PRIMARY KEY (`id`),
	UNIQUE KEY (`skillName`)
) ENGINE=InnoDB;

CREATE TABLE `playerCharacter` (
	`id` int NOT NULL AUTO_INCREMENT,
	`characterName` varchar(255) NOT NULL,
	`level` tinyint UNSIGNED NOT NULL,
	`health` smallint UNSIGNED NOT NULL,
	`strength` smallint UNSIGNED NOT NULL,
	`playerId` int NOT NULL,
	`classId` int NOT NULL,
	PRIMARY KEY (`id`),
	UNIQUE KEY (`characterName`),
	FOREIGN KEY (`classId`) 
		REFERENCES `characterClass`(`id`)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
	FOREIGN KEY (`playerId`) 
		REFERENCES `player`(`id`)
		ON UPDATE CASCADE
		ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE `itemInstance` (
	`id` int NOT NULL AUTO_INCREMENT,
	`classId` int NOT NULL,
	`owner` int NOT NULL,
	PRIMARY KEY (`id`),
	FOREIGN KEY (`classId`) 
		REFERENCES `itemClass`(`id`)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
	FOREIGN KEY (`owner`) 
		REFERENCES `playerCharacter`(`id`)
		ON UPDATE CASCADE
		ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE `pCharSkill` (
	`pCharId` int NOT NULL,
	`skillId` int NOT NULL,
	PRIMARY KEY (`pCharId`, `skillId`),
	FOREIGN KEY (`pCharId`) 
		REFERENCES `playerCharacter`(`id`)
		ON UPDATE CASCADE
		ON DELETE CASCADE,
	FOREIGN KEY (`skillId`) 
		REFERENCES `skill`(`id`)
		ON UPDATE CASCADE
		ON DELETE CASCADE	
) ENGINE=InnoDB;

-- populate tables
-- characterClass insert queries

INSERT INTO characterClass (className, startStrength)
values ("warrior", 50);

INSERT INTO characterClass (className, startStrength)
values ("sorcerer", 10);

INSERT INTO characterClass (className, startStrength)
values ("archer", 25);

-- itemClass insert queries

INSERT INTO itemClass (itemName)
values ("SteelShortSword");

INSERT INTO itemClass (itemName)
values ("SteelLongSword");

INSERT INTO itemClass (itemName)
values ("WornBow");

INSERT INTO itemClass (itemName)
values ("SuperbBow");

INSERT INTO itemClass (itemName)
values ("LeatherShield");

INSERT INTO itemClass (itemName)
values ("IronShield");

-- skill insert queries

INSERT INTO skill (skillName)
values ("HealingMagic");

INSERT INTO skill (skillName)
values ("FireMagic");

INSERT INTO skill (skillName)
values ("Stealth");

INSERT INTO skill (skillName)
values ("ArmorRepair");

-- player insert queries

INSERT INTO player (userName, email) 
values ("smartypants", "jsmith@blahblah.com");

INSERT INTO player (userName, email) 
values ("dragonSlayer", "rick321@something.com");

INSERT INTO player (userName, email) 
values ("rogolfoTheBrave", "randomperson@blahblah.com");

-- playerCharacter insert queries

INSERT INTO playerCharacter (characterName, level, health, strength, playerId, classId)
values ("Rognar", 
	(SELECT startLevel FROM characterClass WHERE className = "warrior"),
	(SELECT startHealth FROM characterClass WHERE className = "warrior"),
	(SELECT startStrength FROM characterClass WHERE className = "warrior"),
	(SELECT id FROM player WHERE userName = "rogolfoTheBrave"),
	(SELECT id FROM characterClass WHERE className = "warrior")
);

INSERT INTO playerCharacter (characterName, level, health, strength, playerId, classId)
values ("Drognestia",
	(SELECT startLevel FROM characterClass WHERE className = "sorcerer"),
	(SELECT startHealth FROM characterClass WHERE className = "sorcerer"),
	(SELECT startStrength FROM characterClass WHERE className = "sorcerer"),
	(SELECT id FROM player WHERE userName = "smartypants"),
	(SELECT id FROM characterClass WHERE className = "sorcerer")
);

INSERT INTO playerCharacter (characterName, level, health, strength, playerId, classId)
values ("Glimbloy",
	(SELECT startLevel FROM characterClass WHERE className = "archer"),
	(SELECT startHealth FROM characterClass WHERE className = "archer"),
	(SELECT startStrength FROM characterClass WHERE className = "archer"),
	(SELECT id FROM player WHERE userName = "dragonSlayer"),
	(SELECT id FROM characterClass WHERE className = "archer")
);

-- pCharSkill insert queries

INSERT INTO pCharSkill (pCharId, skillId)
values (
	(SELECT pc.id FROM playerCharacter pc WHERE pc.characterName = "Drognestia"),
	(SELECT s.id FROM skill s WHERE s.skillName = "FireMagic")
);

INSERT INTO pCharSkill (pCharId, skillId)
values (
	(SELECT pc.id FROM playerCharacter pc WHERE pc.characterName = "Glimbloy"),
	(SELECT s.id FROM skill s WHERE s.skillName = "ArmorRepair")
);

-- itemInstance insert queries

INSERT INTO itemInstance (classId, owner)
values (
	(SELECT id FROM itemClass WHERE itemName = "SteelShortSword"),
	(SELECT id FROM playerCharacter WHERE characterName = "Drognestia")
);

INSERT INTO itemInstance (classId, owner)
values (
	(SELECT id FROM itemClass WHERE itemName = "WornBow"),
	(SELECT id FROM playerCharacter WHERE characterName = "Rognar")
);

INSERT INTO itemInstance (classId, owner)
values (
	(SELECT id FROM itemClass WHERE itemName = "LeatherShield"),
	(SELECT id FROM playerCharacter WHERE characterName = "Glimbloy")
);



-- general use queries

-- get the contents of 'player'

SELECT id, userName, email FROM player;

-- create a new player

INSERT INTO player (userName, email) VALUES (?, ?);

-- create a new item instance to give to a character

INSERT INTO itemInstance (classId, owner) VALUES (?, ?);

-- query database for user id of specified user

SELECT id FROM player WHERE userName = ?;

-- get the contents of 'playerCharacter'

SELECT pc.id, characterName, p.userName, cc.className, level, health, strength
	FROM playerCharacter pc INNER JOIN player p ON pc.playerId = p.id
	INNER JOIN characterClass cc ON pc.classId = cc.id
	ORDER BY p.userName;

-- create a new player character

INSERT INTO playerCharacter (characterName, level, health, strength, playerId, classId) 
	VALUES (?,
	(SELECT startLevel FROM characterClass WHERE id = ?), 
	(SELECT startHealth FROM characterClass WHERE id = ?),
	(SELECT startStrength FROM characterClass WHERE id = ?),
	?, ?);");

-- get a list of character classes

SELECT id, className FROM characterClass ORDER BY id;

-- get all the skills a particular character has

SELECT s.id, s.skillName 
FROM skill s INNER JOIN pCharSkill ps ON s.id = ps.skillId
WHERE ps.pCharId = ?;

-- get a list of skills the character does not have

SELECT s.id, s.skillName FROM skill s 
WHERE s.id NOT IN (
	SELECT skillId FROM pCharSkill
	WHERE pCharId = ?);

-- get a table of items possessed by a character

SELECT ii.id, ic.itemName 
		FROM itemInstance ii 
		INNER JOIN itemClass ic ON ii.classId = ic.id
		INNER JOIN playerCharacter pc ON ii.owner = pc.id
		WHERE pc.id = ?;
		
-- get information on one character (skills, items, stats)
SELECT p.userName,
	pc.characterName, 
	cClass.className,
	pc.level, 
	pc.health, 
	pc.strength, 
	IFNULL(cSkl.skillCount, 0) skillCount,
	IFNULL(cItm.itemCount, 0) itemCount
from player p
inner join playerCharacter pc on p.id = pc.playerId
inner join characterClass cClass on cClass.id = pc.classId
left join(
	SELECT pc.id, count(pcs.skillId) skillCount
	FROM playerCharacter pc
		left join pCharSkill pcs on pc.id=pcs.pCharId
		left join skill s on s.id = pcs.skillId
	GROUP BY pc.id
) cSkl on pc.id = cSkl.id
left join(
	SELECT pc.id, count(itmI.id) itemCount
	FROM playerCharacter pc
		left join itemInstance itmI on pc.id = itmI.owner
		left join itemClass itmC on itmI.classId = itmC.id
	
	GROUP BY pc.id
) cItm on cItm.id = pc.id
WHERE pc.id = [SelectCharacterID]

	
	
-- UPDATE, DELETE, etc.
-- change player's email address

UPDATE player SET email = ? WHERE id = ?;

-- delete player row

DELETE FROM player WHERE id = ?;

-- destroy item instance

DELETE FROM itemInstance WHERE id = ?;



